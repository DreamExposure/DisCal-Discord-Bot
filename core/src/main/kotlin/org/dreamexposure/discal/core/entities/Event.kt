package org.dreamexposure.discal.core.entities

import discord4j.common.util.Snowflake
import org.dreamexposure.discal.core.`object`.announcement.Announcement
import org.dreamexposure.discal.core.`object`.event.Recurrence
import org.dreamexposure.discal.core.`object`.event.RsvpData
import org.dreamexposure.discal.core.enums.event.EventColor
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
import java.time.Instant

interface Event {
    /**
     * The ID of the event.
     * In the format eXXXXXXXXXX if generated by DisCal, otherwise it was generated by the 3rd party calendar service
     */
    val eventId: String

    /**
     * The ID of the guild this event belongs to.
     */
    val guildId: Snowflake

    /**
     * The name of the event, renamed from "summary" to make it more user-friendly and clear.
     * This has already been sanitized
     */
    var name: String

    /**
     * A description of what the event is about.
     * This has already been sanitized
     */
    var description: String

    /**
     * The location at which the event occurs, usually a map location.
     * This has already been sanitized
     */
    var location: String

    /**
     * The color of the event. Used for visually identifying it in Discord embeds.
     * If no event color is assigned, it returns .NONE which is DisCal blue.
     */
    var color: EventColor

    /**
     * The start of the event, as a Java Instant representing the time starting from January 1st 1970.
     */
    var start: Instant

    /**
     * The end of the event, as a Java Instant representing the time starting from January 1st 1970.
     */
    var end: Instant

    /**
     * Whether or not the event is a recurring event.
     */
    var recur: Boolean

    /**
     * The rules of the recurring event. Contains the RRule an human readable information on how the event will recur
     */
    var recurrence: Recurrence

    /**
     * A link to the image, if none is present, returns empty
     */
    var image: String

    //Reactive
    /**
     * Attempts to request the Timezone the event occurs in, normally the timezone of the calendar.
     * If an error occurs, it is emitted through the Mono.
     */
    fun getTimezone(): Mono<String>

    /**
     * Attempts to request the announcements linked to the event, such as a SPECIFIC type announcement.
     * If an error occurs, it is emitted through the Flux.
     */
    fun getLinkedAnnouncements(): Flux<Announcement>

    /**
     * Attempts to request the RsvpData of the event.
     * If an error occurs, it is emitted through the Mono.
     */
    fun getRsvp(): Mono<RsvpData>
    //Should I add #save #update #delete here? nah, probably should be on the calendar entity
}
